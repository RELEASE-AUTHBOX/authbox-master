# Generated by Django 4.1.2 on 2022-11-21 11:28

import ckeditor_uploader.fields
import core.managers.user
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields
import parler.fields
import parler.models
import shortuuid.django_fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('region', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('sites', '0002_alter_domain_unique'),
        ('menu', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('shortuuid', shortuuid.django_fields.ShortUUIDField(alphabet='abcdefghkmnprwxy2345678', blank=True, editable=False, length=4, max_length=10, null=True, prefix='')),
                ('email', django_cryptography.fields.encrypt(models.EmailField(blank=True, max_length=254, null=True, verbose_name='email'))),
                ('phone', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, null=True, verbose_name='phone'))),
                ('fax', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, null=True, verbose_name='fax'))),
                ('whatsapp', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=20, null=True, verbose_name='whatsapp'))),
                ('billing_type', models.SmallIntegerField(blank=True, choices=[(1, 'Transaction Base'), (2, 'Time Base'), (3, 'Advertise Base')], default=2, verbose_name='billing type')),
                ('conversion', models.FloatField(blank=True, default=0, editable=False)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='region.country', verbose_name='country')),
                ('province', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='region.province', verbose_name='province')),
                ('regency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='region.regency', verbose_name='regency')),
                ('sub_district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='region.subdistrict', verbose_name='sub district')),
                ('urban_village', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='region.urbanvillage', verbose_name='urban village')),
            ],
            options={
                'verbose_name': 'agency',
                'verbose_name_plural': 'agencies',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('rel_path', models.CharField(max_length=255, verbose_name='relative path')),
                ('is_frontend', models.BooleanField(default=True)),
                ('site', models.ManyToManyField(related_name='templates_site', to='sites.site')),
            ],
            options={
                'verbose_name': 'template',
                'verbose_name_plural': 'templates',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('kind', models.SmallIntegerField(choices=[(1, 'Education')])),
                ('is_active', models.BooleanField(blank=True, default=False)),
                ('expired_date', models.DateTimeField()),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='service_agencies', to='core.agency')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.site')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file_path', models.ImageField(upload_to='')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'photo',
                'verbose_name_plural': 'photos',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email address')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='name')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=True, verbose_name='staff')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='super user')),
                ('is_main_user', models.BooleanField(blank=True, default=False)),
                ('is_first_enter', models.BooleanField(blank=True, default=True)),
                ('is_management', models.BooleanField(blank=True, default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('agency', models.ManyToManyField(related_name='user_agencies', to='core.agency')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('menu_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='menu.menugroup', verbose_name='menu group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', core.managers.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AgencyTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('address', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='address'))),
                ('notes', django_cryptography.fields.encrypt(ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='description'))),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='core.agency')),
            ],
            options={
                'verbose_name': 'agency Translation',
                'db_table': 'core_agency_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
