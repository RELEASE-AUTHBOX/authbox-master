Load setting from .environment-setiawan-plasma
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountEmailaddress(models.Model):
    verified = models.BooleanField()
    primary = models.BooleanField()
    user = models.ForeignKey('CoreUser', models.DO_NOTHING)
    email = models.CharField(unique=True, max_length=254)

    class Meta:
        managed = False
        db_table = 'account_emailaddress'


class AccountEmailconfirmation(models.Model):
    created = models.DateTimeField()
    sent = models.DateTimeField(blank=True, null=True)
    key = models.CharField(unique=True, max_length=64)
    email_address = models.ForeignKey(AccountEmailaddress, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'account_emailconfirmation'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class CoreAgency(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=100)
    shortuuid = models.CharField(max_length=10, blank=True, null=True)
    email = models.BinaryField(blank=True, null=True)
    phone = models.BinaryField(blank=True, null=True)
    fax = models.BinaryField(blank=True, null=True)
    whatsapp = models.BinaryField(blank=True, null=True)
    billing_type = models.SmallIntegerField()
    conversion = models.FloatField()
    country = models.ForeignKey('RegionCountry', models.DO_NOTHING, blank=True, null=True)
    province = models.ForeignKey('RegionProvince', models.DO_NOTHING, blank=True, null=True)
    regency = models.ForeignKey('RegionRegency', models.DO_NOTHING, blank=True, null=True)
    sub_district = models.ForeignKey('RegionSubdistrict', models.DO_NOTHING, blank=True, null=True)
    urban_village = models.ForeignKey('RegionUrbanvillage', models.DO_NOTHING, blank=True, null=True)
    is_default = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'core_agency'


class CoreAgencyTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    address = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(CoreAgency, models.DO_NOTHING, blank=True, null=True)
    notes = models.BinaryField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'core_agency_translation'
        unique_together = (('language_code', 'master'),)


class CoreAgencymeta(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=100, blank=True, null=True)
    url = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    description = models.CharField(max_length=500)
    web_type = models.SmallIntegerField()
    locale = models.SmallIntegerField()
    image_type = models.SmallIntegerField()
    agency = models.OneToOneField(CoreAgency, models.DO_NOTHING, blank=True, null=True)
    locale_alternate = models.SmallIntegerField()

    class Meta:
        managed = False
        db_table = 'core_agencymeta'


class CoreGlobalsetting(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.SmallIntegerField()
    value = models.CharField(max_length=255, blank=True, null=True)
    site = models.ForeignKey('DjangoSite', models.DO_NOTHING)
    ref_template_block = models.ForeignKey('CoreTemplateblock', models.DO_NOTHING, blank=True, null=True)
    order_item = models.PositiveIntegerField()

    class Meta:
        managed = False
        db_table = 'core_globalsetting'


class CoreIconlist(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    icon = models.CharField(max_length=100, blank=True, null=True)
    template = models.ForeignKey('CoreTemplate', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_iconlist'


class CoreMenudefault(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    service_option = models.CharField(max_length=255, blank=True, null=True)
    model_list = models.ForeignKey('CoreModellist', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_menudefault'
        unique_together = (('service_option', 'model_list'),)


class CoreModellist(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=255)
    status = models.SmallIntegerField()
    menu = models.OneToOneField('MenuMenu', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'core_modellist'


class CoreModellistsetting(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    image_height = models.SmallIntegerField()
    model_list = models.ForeignKey(CoreModellist, models.DO_NOTHING)
    template = models.ForeignKey('CoreTemplate', models.DO_NOTHING)
    image_width = models.SmallIntegerField()

    class Meta:
        managed = False
        db_table = 'core_modellistsetting'
        unique_together = (('model_list', 'template'),)


class CorePhoto(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    object_id = models.PositiveIntegerField(blank=True, null=True)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    file_path = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'core_photo'


class CoreService(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    kind = models.SmallIntegerField()
    is_active = models.BooleanField()
    expired_date = models.DateTimeField()
    agency = models.ForeignKey(CoreAgency, models.DO_NOTHING, blank=True, null=True)
    site = models.OneToOneField('DjangoSite', models.DO_NOTHING, blank=True, null=True)
    is_demo = models.BooleanField()
    is_default = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'core_service'


class CoreTemplate(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=50)
    rel_path = models.CharField(max_length=255)
    is_frontend = models.BooleanField()
    template_owner = models.ForeignKey('CoreTemplateowner', models.DO_NOTHING, blank=True, null=True)
    service_option = models.CharField(max_length=255, blank=True, null=True)
    status = models.SmallIntegerField()

    class Meta:
        managed = False
        db_table = 'core_template'


class CoreTemplateSite(models.Model):
    template = models.ForeignKey(CoreTemplate, models.DO_NOTHING)
    site = models.ForeignKey('DjangoSite', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_template_site'
        unique_together = (('template', 'site'),)


class CoreTemplateblock(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=100)
    price_level = models.SmallIntegerField()
    status = models.SmallIntegerField()
    template = models.ForeignKey(CoreTemplate, models.DO_NOTHING)
    description = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'core_templateblock'


class CoreTemplateblockModelList(models.Model):
    templateblock = models.ForeignKey(CoreTemplateblock, models.DO_NOTHING)
    modellist = models.ForeignKey(CoreModellist, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_templateblock_model_list'
        unique_together = (('templateblock', 'modellist'),)


class CoreTemplateowner(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'core_templateowner'


class CoreUser(models.Model):
    password = models.CharField(max_length=128)
    email = models.CharField(unique=True, max_length=100)
    name = models.CharField(max_length=100)
    is_active = models.BooleanField()
    is_staff = models.BooleanField()
    is_superuser = models.BooleanField()
    date_joined = models.DateTimeField()
    last_login = models.DateTimeField(blank=True, null=True)
    site = models.ForeignKey('DjangoSite', models.DO_NOTHING, blank=True, null=True)
    email_confirmed = models.BooleanField()
    uuid = models.CharField(unique=True, max_length=32, blank=True, null=True)
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'core_user'


class CoreUserAgency(models.Model):
    user = models.ForeignKey(CoreUser, models.DO_NOTHING)
    agency = models.ForeignKey(CoreAgency, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_user_agency'
        unique_together = (('user', 'agency'),)


class CoreUserGroups(models.Model):
    user = models.ForeignKey(CoreUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_user_groups'
        unique_together = (('user', 'group'),)


class CoreUserUserPermissions(models.Model):
    user = models.ForeignKey(CoreUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'core_user_user_permissions'
        unique_together = (('user', 'permission'),)


class CoreUserlog(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_expired = models.BooleanField()
    site = models.ForeignKey('DjangoSite', models.DO_NOTHING)
    user = models.ForeignKey(CoreUser, models.DO_NOTHING, blank=True, null=True)
    ip_address = models.CharField(max_length=40)
    user_agent = models.CharField(max_length=255)
    social_media = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'core_userlog'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(CoreUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class DjangoSite(models.Model):
    name = models.CharField(max_length=50)
    domain = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'django_site'


class FrontendAboutus(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_aboutus'


class FrontendAboutusTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    sub_title = models.BinaryField()
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendAboutus, models.DO_NOTHING, blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_aboutus_translation'
        unique_together = (('language_code', 'master'),)


class FrontendAnnouncement(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    priority = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    categories = models.ForeignKey('FrontendCategories', models.DO_NOTHING, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_announcement'


class FrontendAnnouncementTags(models.Model):
    announcement = models.ForeignKey(FrontendAnnouncement, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_announcement_tags'
        unique_together = (('announcement', 'tags'),)


class FrontendAnnouncementTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendAnnouncement, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_announcement_translation'
        unique_together = (('language_code', 'master'),)


class FrontendArticle(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    categories = models.ForeignKey('FrontendCategories', models.DO_NOTHING, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_article'


class FrontendArticleTags(models.Model):
    article = models.ForeignKey(FrontendArticle, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_article_tags'
        unique_together = (('article', 'tags'),)


class FrontendArticleTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendArticle, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_article_translation'
        unique_together = (('language_code', 'master'),)


class FrontendBanner(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    link = models.CharField(max_length=255, blank=True, null=True)
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    priority = models.SmallIntegerField()
    status = models.SmallIntegerField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_banner'


class FrontendCart(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    qty = models.PositiveIntegerField()
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    product = models.ForeignKey('FrontendProduct', models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_cart'


class FrontendCategories(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    status = models.SmallIntegerField()
    is_initial_data = models.BooleanField()
    slug = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'frontend_categories'


class FrontendCategoriesTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendCategories, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'frontend_categories_translation'
        unique_together = (('language_code', 'master'),)


class FrontendDailyalert(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    link = models.CharField(max_length=255, blank=True, null=True)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_dailyalert'


class FrontendDailyalertTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    alert = models.BinaryField()
    master = models.ForeignKey(FrontendDailyalert, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'frontend_dailyalert_translation'
        unique_together = (('language_code', 'master'),)


class FrontendDocument(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    size = models.BigIntegerField(blank=True, null=True)
    hits = models.IntegerField(blank=True, null=True)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    categories = models.ForeignKey(FrontendCategories, models.DO_NOTHING, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    view_count = models.PositiveIntegerField()
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()
    file_path_doc = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'frontend_document'


class FrontendDocumentTags(models.Model):
    document = models.ForeignKey(FrontendDocument, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_document_tags'
        unique_together = (('document', 'tags'),)


class FrontendDocumentTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendDocument, models.DO_NOTHING, blank=True, null=True)
    name = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_document_translation'
        unique_together = (('language_code', 'master'),)


class FrontendEvents(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    date = models.DateField()
    time = models.TimeField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    categories = models.ForeignKey(FrontendCategories, models.DO_NOTHING, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_events'


class FrontendEventsTags(models.Model):
    events = models.ForeignKey(FrontendEvents, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_events_tags'
        unique_together = (('events', 'tags'),)


class FrontendEventsTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    location = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendEvents, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_events_translation'
        unique_together = (('language_code', 'master'),)


class FrontendFasilities(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    is_header_text = models.BooleanField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    order_item = models.PositiveIntegerField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_fasilities'


class FrontendFasilitiesTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendFasilities, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_fasilities_translation'
        unique_together = (('language_code', 'master'),)


class FrontendFavicon(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=100)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_favicon'


class FrontendGooglecalendar(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_default = models.BooleanField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()
    calendar_id = models.CharField(max_length=100)
    file_path_doc = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'frontend_googlecalendar'


class FrontendGooglecalendardetail(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    cal_year = models.PositiveIntegerField()
    cal_month = models.PositiveIntegerField()
    cal_json = models.TextField(blank=True, null=True)
    google_calendar = models.ForeignKey(FrontendGooglecalendar, models.DO_NOTHING)
    is_initial_data = models.BooleanField()
    description = models.CharField(max_length=300, blank=True, null=True)
    end = models.DateTimeField(blank=True, null=True)
    event_id = models.CharField(max_length=100)
    location = models.CharField(max_length=300, blank=True, null=True)
    start = models.DateTimeField(blank=True, null=True)
    summary = models.CharField(max_length=300, blank=True, null=True)
    transparency = models.CharField(max_length=300, blank=True, null=True)
    visibility = models.CharField(max_length=300, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'frontend_googlecalendardetail'


class FrontendGreeting(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    slug = models.CharField(unique=True, max_length=255)
    view_count = models.PositiveIntegerField()
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_greeting'


class FrontendGreetingTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    name = models.BinaryField(blank=True, null=True)
    designation = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendGreeting, models.DO_NOTHING, blank=True, null=True)
    title = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'frontend_greeting_translation'
        unique_together = (('language_code', 'master'),)


class FrontendHowitworks(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    icon = models.CharField(max_length=100, blank=True, null=True)
    is_header_text = models.BooleanField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    order_item = models.PositiveIntegerField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_howitworks'


class FrontendHowitworksTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendHowitworks, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_howitworks_translation'
        unique_together = (('language_code', 'master'),)


class FrontendLocation(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    embed = models.TextField(blank=True, null=True)
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_location'


class FrontendLocationTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendLocation, models.DO_NOTHING, blank=True, null=True)
    subtitle = models.BinaryField()
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_location_translation'
        unique_together = (('language_code', 'master'),)


class FrontendLogo(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    name = models.CharField(max_length=100)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_logo'


class FrontendNews(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    categories = models.ForeignKey(FrontendCategories, models.DO_NOTHING, blank=True, null=True)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_news'


class FrontendNewsTags(models.Model):
    news = models.ForeignKey(FrontendNews, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_news_tags'
        unique_together = (('news', 'tags'),)


class FrontendNewsTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendNews, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_news_translation'
        unique_together = (('language_code', 'master'),)


class FrontendOffers(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    is_header_text = models.BooleanField()
    order_item = models.PositiveIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_offers'


class FrontendOffersTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendOffers, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_offers_translation'
        unique_together = (('language_code', 'master'),)


class FrontendPages(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    share_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    word_count = models.PositiveIntegerField()
    reading_time = models.PositiveIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    menu = models.ForeignKey('MenuMenu', models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    categories = models.ForeignKey(FrontendCategories, models.DO_NOTHING, blank=True, null=True)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_pages'


class FrontendPagesTags(models.Model):
    pages = models.ForeignKey(FrontendPages, models.DO_NOTHING)
    tags = models.ForeignKey('FrontendTags', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'frontend_pages_tags'
        unique_together = (('pages', 'tags'),)


class FrontendPagesTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendPages, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_pages_translation'
        unique_together = (('language_code', 'master'),)


class FrontendPhotogallery(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    order_item = models.PositiveIntegerField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_photogallery'


class FrontendPhotogalleryTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendPhotogallery, models.DO_NOTHING, blank=True, null=True)
    content = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_photogallery_translation'
        unique_together = (('language_code', 'master'),)


class FrontendPopup(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    link = models.BinaryField(blank=True, null=True)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_popup'


class FrontendPopupTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendPopup, models.DO_NOTHING, blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_popup_translation'
        unique_together = (('language_code', 'master'),)


class FrontendProduct(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    is_header_text = models.BooleanField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    order_item = models.PositiveIntegerField()
    icon = models.CharField(max_length=100, blank=True, null=True)
    price_currency = models.CharField(max_length=3)
    price = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_product'


class FrontendProductTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    name = models.BinaryField()
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendProduct, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_product_translation'
        unique_together = (('language_code', 'master'),)


class FrontendPurchasing(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    qty = models.PositiveIntegerField()
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    product = models.ForeignKey(FrontendProduct, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_purchasing'


class FrontendRelatedlink(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    link = models.BinaryField()
    status = models.SmallIntegerField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_relatedlink'


class FrontendRelatedlinkTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendRelatedlink, models.DO_NOTHING, blank=True, null=True)
    name = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_relatedlink_translation'
        unique_together = (('language_code', 'master'),)


class FrontendSlideshow(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_slideshow'


class FrontendSlideshowTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendSlideshow, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.CharField(max_length=300, blank=True, null=True)
    title = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'frontend_slideshow_translation'
        unique_together = (('language_code', 'master'),)


class FrontendSocialmedia(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    kind = models.SmallIntegerField()
    link = models.BinaryField()
    status = models.SmallIntegerField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_socialmedia'


class FrontendTags(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    status = models.SmallIntegerField()
    is_initial_data = models.BooleanField()
    slug = models.CharField(unique=True, max_length=100)

    class Meta:
        managed = False
        db_table = 'frontend_tags'


class FrontendTagsTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendTags, models.DO_NOTHING, blank=True, null=True)
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'frontend_tags_translation'
        unique_together = (('language_code', 'master'),)


class FrontendTestimony(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_header_text = models.BooleanField()
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    subtitle = models.BinaryField()
    is_initial_data = models.BooleanField()
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_testimony'


class FrontendTestimonyTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    content = models.BinaryField(blank=True, null=True)
    master = models.ForeignKey(FrontendTestimony, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'frontend_testimony_translation'
        unique_together = (('language_code', 'master'),)


class FrontendVideogallery(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    view_count = models.PositiveIntegerField()
    slug = models.CharField(unique=True, max_length=255)
    status = models.SmallIntegerField()
    embed = models.TextField(blank=True, null=True)
    embed_video = models.CharField(max_length=200, blank=True, null=True)
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_initial_data = models.BooleanField()
    is_header_text = models.BooleanField()
    order_item = models.PositiveIntegerField()

    class Meta:
        managed = False
        db_table = 'frontend_videogallery'


class FrontendVideogalleryTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    master = models.ForeignKey(FrontendVideogallery, models.DO_NOTHING, blank=True, null=True)
    title = models.BinaryField()

    class Meta:
        managed = False
        db_table = 'frontend_videogallery_translation'
        unique_together = (('language_code', 'master'),)


class FrontendWhyus(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    icon = models.CharField(max_length=100)
    status = models.SmallIntegerField()
    admin = models.ForeignKey(CoreUser, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)
    is_header_text = models.BooleanField()
    is_initial_data = models.BooleanField()

    class Meta:
        managed = False
        db_table = 'frontend_whyus'


class FrontendWhyusTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    description = models.CharField(max_length=500)
    master = models.ForeignKey(FrontendWhyus, models.DO_NOTHING, blank=True, null=True)
    sub_title = models.BinaryField(blank=True, null=True)
    title = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'frontend_whyus_translation'
        unique_together = (('language_code', 'master'),)


class HitcountBlacklistIp(models.Model):
    ip = models.CharField(unique=True, max_length=40)

    class Meta:
        managed = False
        db_table = 'hitcount_blacklist_ip'


class HitcountBlacklistUserAgent(models.Model):
    user_agent = models.CharField(unique=True, max_length=255)

    class Meta:
        managed = False
        db_table = 'hitcount_blacklist_user_agent'


class HitcountHit(models.Model):
    created = models.DateTimeField()
    ip = models.CharField(max_length=40)
    session = models.CharField(max_length=40)
    user_agent = models.CharField(max_length=255)
    hitcount = models.ForeignKey('HitcountHitCount', models.DO_NOTHING)
    user = models.ForeignKey(CoreUser, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'hitcount_hit'


class HitcountHitCount(models.Model):
    hits = models.PositiveIntegerField()
    modified = models.DateTimeField()
    object_pk = models.PositiveIntegerField()
    content_type = models.ForeignKey(DjangoContentType, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'hitcount_hit_count'
        unique_together = (('content_type', 'object_pk'),)


class MenuMenu(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    link = models.CharField(max_length=255)
    order_menu = models.SmallIntegerField()
    icon = models.CharField(max_length=50, blank=True, null=True)
    kind = models.SmallIntegerField()
    is_visibled = models.BooleanField()
    is_external = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_new = models.BooleanField()
    exclude_menu = models.BooleanField()
    is_initial_data = models.BooleanField()
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_menu'


class MenuMenuMenuGroup(models.Model):
    menu = models.ForeignKey(MenuMenu, models.DO_NOTHING)
    menugroup = models.ForeignKey('MenuMenugroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'menu_menu_menu_group'
        unique_together = (('menu', 'menugroup'),)


class MenuMenuTranslation(models.Model):
    language_code = models.CharField(max_length=15)
    name = models.CharField(max_length=100)
    master = models.ForeignKey(MenuMenu, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_menu_translation'
        unique_together = (('language_code', 'master'),)


class MenuMenugroup(models.Model):
    uuid = models.CharField(unique=True, max_length=32)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    kind = models.SmallIntegerField()
    level = models.SmallIntegerField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING, blank=True, null=True)
    group = models.OneToOneField(AuthGroup, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'menu_menugroup'


class OutboxHitcountHitbrowser(models.Model):
    name = models.CharField(max_length=50)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    version = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitbrowser'


class OutboxHitcountHitcount(models.Model):
    count = models.PositiveBigIntegerField()
    object_pk = models.PositiveIntegerField()
    content_type = models.ForeignKey(DjangoContentType, models.DO_NOTHING)
    end_date = models.DateTimeField()
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitcount'


class OutboxHitcountHitcountHitsBrowser(models.Model):
    hitcount = models.ForeignKey(OutboxHitcountHitcount, models.DO_NOTHING)
    hitbrowser = models.ForeignKey(OutboxHitcountHitbrowser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitcount_hits_browser'
        unique_together = (('hitcount', 'hitbrowser'),)


class OutboxHitcountHitcountHitsDevice(models.Model):
    hitcount = models.ForeignKey(OutboxHitcountHitcount, models.DO_NOTHING)
    hitdevice = models.ForeignKey('OutboxHitcountHitdevice', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitcount_hits_device'
        unique_together = (('hitcount', 'hitdevice'),)


class OutboxHitcountHitcountHitsLocation(models.Model):
    hitcount = models.ForeignKey(OutboxHitcountHitcount, models.DO_NOTHING)
    hitlocation = models.ForeignKey('OutboxHitcountHitlocation', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitcount_hits_location'
        unique_together = (('hitcount', 'hitlocation'),)


class OutboxHitcountHitcountHitsOs(models.Model):
    hitcount = models.ForeignKey(OutboxHitcountHitcount, models.DO_NOTHING)
    hitos = models.ForeignKey('OutboxHitcountHitos', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitcount_hits_os'
        unique_together = (('hitcount', 'hitos'),)


class OutboxHitcountHitdevice(models.Model):
    name = models.CharField(max_length=50)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    version = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitdevice'


class OutboxHitcountHitlocation(models.Model):
    ip_address = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    city = models.CharField(max_length=50, blank=True, null=True)
    country = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitlocation'


class OutboxHitcountHitos(models.Model):
    name = models.CharField(max_length=50)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    version = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'outbox_hitcount_hitos'


class RegionCountry(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'region_country'


class RegionProvince(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    country = models.ForeignKey(RegionCountry, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region_province'


class RegionRegency(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    province = models.ForeignKey(RegionProvince, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region_regency'


class RegionSubdistrict(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    regency = models.ForeignKey(RegionRegency, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region_subdistrict'


class RegionUrbanvillage(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    sub_district = models.ForeignKey(RegionSubdistrict, models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'region_urbanvillage'


class SocialaccountSocialaccount(models.Model):
    provider = models.CharField(max_length=30)
    uid = models.CharField(max_length=191)
    last_login = models.DateTimeField()
    date_joined = models.DateTimeField()
    user = models.ForeignKey(CoreUser, models.DO_NOTHING)
    extra_data = models.TextField()

    class Meta:
        managed = False
        db_table = 'socialaccount_socialaccount'
        unique_together = (('provider', 'uid'),)


class SocialaccountSocialapp(models.Model):
    provider = models.CharField(max_length=30)
    name = models.CharField(max_length=40)
    client_id = models.CharField(max_length=191)
    key = models.CharField(max_length=191)
    secret = models.CharField(max_length=191)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp'


class SocialaccountSocialappSites(models.Model):
    socialapp = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING)
    site = models.ForeignKey(DjangoSite, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialapp_sites'
        unique_together = (('socialapp', 'site'),)


class SocialaccountSocialtoken(models.Model):
    token = models.TextField()
    token_secret = models.TextField()
    expires_at = models.DateTimeField(blank=True, null=True)
    account = models.ForeignKey(SocialaccountSocialaccount, models.DO_NOTHING)
    app = models.ForeignKey(SocialaccountSocialapp, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'socialaccount_socialtoken'
        unique_together = (('app', 'account'),)
